#!/usr/bin/env ruby
# -----------------------------------------------------------------------------
# Script to convert the MoMA data dump from JSON to a postgres (psql) script 
# Author: Urs Roesch <github@bun.ch>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Modules
# -----------------------------------------------------------------------------
require 'erb'
require 'json'
require 'optparse'

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
SCRIPT   = File.basename($PROGRAM_NAME)
TEMPLATE = DATA.read
VERSION  = '0.2.1'
AUTHOR   = 'Urs Roesch <github@bun.ch>'
LICENSE  = 'MIT'
PASSWORD = '@Top-Secret!!'

# -----------------------------------------------------------------------------
# Classes
# -----------------------------------------------------------------------------
class Options
  def self.parse(argv)
    result = {}
    option_parser = OptionParser.new do |options|
      options.banner = "Usage:\n    #{SCRIPT} [options]\n\nOptions:\n"

      options.on("-oFILE", "--output=FILE", "Write SQL to ouptut file") do |f|
        result[:output] = f
      end

      options.on("-pPW", "--password=PW", "Use password for moma user") do |p|
        result[:password] = p
      end 

      options.on("-h", "--help", "Print this message") do
        puts options
        exit 0
      end
    end
    option_parser.parse!(argv)
    result
  end
end

# -----------------------------------------------------------------------------
class ConvertToSql
  DATA_DIR = File.realpath(File.join(File.dirname(__FILE__), '..'))
  def read_json
    begin
      raw   = File.read(json_file)
      @json = JSON.parse(raw, symbolize_names: true)
    rescue => e
      puts e.message
      exit 123
    end
    self
  end

  def to_table
    read_json unless @json
    @table = @json.map do |record| 
      @fields.keys.inject([]) do |entry, key|
        value = record.fetch(key, '')
        entry.push(convert_value(value))
        entry
      end
    end
    self
  end

  def data
    to_table unless @json
    @table.map { |r| r.join("\t") }.join("\n") 
  end

  def ddl_columns
    ddl = @fields.map do |key, value|
       "  #{key_to_column(key)} #{value}"
    end
    ddl.join(",\n")
  end 

  def columns
    keys_to_column.join(', ')
  end

  private

  def json_file
    return @json_file if File.exists?(@json_file)
    json_file = File.join(DATA_DIR, @json_file)
    return json_file if File.exists?(json_file)
    ''
  end

  def keys_to_column
    # make keys conform sql naming standard 
    @fields.keys.map { |key| key_to_column(key) }
  end

  def key_to_column(key)
    key
      .to_s
      .downcase
      .gsub(%r{[[:space:]]}, '_')
      .gsub(%r{[^a-z0-9_]}, '')
  end

  def convert_value(value)
     case value.class.to_s
     when 'Array'
       # postgresql array notion
       '{' + value.join(', ') + '}'
     when 'String'
       normalize_string(value)
     else
       value
     end
  end

  def normalize_string(value)
    value
      .strip                   # remove whitespace
      .gsub('\\', '\\\\\\')    # escape backslashes
      .gsub(%r{\r}, '')        # remove line feed
      .gsub(%r{\n}, '\\n')     # escape newlines
  end
end

# -----------------------------------------------------------------------------

class Artworks < ConvertToSql
  JSON_FILE = 'Artworks.json'
  FIELDS    = {
    Title: 'TEXT NOT NULL',          
    ConstituentID: 'INTEGER[] NOT NULL',
    Date: 'TEXT',
    Medium: 'TEXT',
    Dimensions: 'TEXT',
    Creditline: 'TEXT',
    AccessionNumber: 'TEXT',
    Classification: 'TEXT',
    Department: 'TEXT',
    DateAcquired: 'TEXT NULL',
    Cataloged: 'BOOLEAN NULL',
    ObjectID: 'TEXT NOT NULL',
    URL: 'TEXT NULL',
    ThumbnailURL: 'TEXT NULL',
    'Height (cm)': 'TEXT NULL',
    'Width (cm)': 'TEXT NULL',
  }

  def initialize
    @json_file = JSON_FILE
    @fields    = FIELDS
  end
end

# -----------------------------------------------------------------------------

class Artists < ConvertToSql
  JSON_FILE = 'Artists.json'
  FIELDS    = {
    ConstituentID: 'INTEGER GENERATED ALWAYS AS IDENTITY',
    DisplayName: 'TEXT NOT NULL', 
    ArtistBio: 'TEXT NULL', 
    Nationality: 'TEXT',
    Gender: 'TEXT',
    BeginDate: 'INTEGER DEFAULT NULL',
    EndDate: 'INTEGER DEFAULT NULL',
    'Wiki QID': 'QID',
    'ULAN': 'TEXT NULL' 
  }

  def initialize
    @json_file = JSON_FILE
    @fields    = FIELDS
  end
end


# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
options  = Options.parse(ARGV)
artists  = Artists.new
artworks = Artworks.new

# table creation for normalization
tables = {
  medium:         :artworks,
  creditline:     :artworks,
  nationality:    :artists
}

# enum type creation for better integrity
enums = {
  classification: :artworks,
  department:     :artworks,
  gender:         :artists
}

# enum type creation for better integrity
password = options.fetch(:password, PASSWORD)

begin
  sql = ERB.new(TEMPLATE).result
  File.open(options.fetch(:output, nil), 'w') do |fh|
    fh.puts sql
  end
rescue Errno::ENOENT => e
  $stderr.puts e.message
  exit 124
rescue TypeError
  $stdout.puts sql
end
__END__
/* ----------------------------------------------------------------------------
  Create moma user and database
---------------------------------------------------------------------------- */
CREATE ROLE moma PASSWORD '<%= password %>' LOGIN;
GRANT moma to postgres;
CREATE DATABASE moma WITH OWNER moma ENCODING 'UTF-8';


/* ----------------------------------------------------------------------------
  Connect to moma and grant schema permission
---------------------------------------------------------------------------- */
\connect moma

-- schema creation
GRANT USAGE ON SCHEMA public to moma;
GRANT CREATE ON SCHEMA public to moma;

/* ----------------------------------------------------------------------------
  Create Static types and domains
---------------------------------------------------------------------------- */
CREATE DOMAIN QID AS TEXT
  DEFAULT ''
  NULL CHECK (
      VALUE ~ '^(q|Q)\d+$'
   OR VALUE ~ '^$'
  );

/* ----------------------------------------------------------------------------
  Create Tables
---------------------------------------------------------------------------- */
CREATE TABLE Artists (
<%= artists.ddl_columns %>
);

CREATE TABLE Artworks (
<%= artworks.ddl_columns %>
);


/* ----------------------------------------------------------------------------
  Poupulate Tables
---------------------------------------------------------------------------- */
COPY Artists (<%= artists.columns %>) FROM stdin;
<%= artists.data %>
\.

COPY Artworks (<%= artworks.columns %>) FROM stdin;
<%= artworks.data %>
\.


/* ----------------------------------------------------------------------------
  Data cleanup artists
---------------------------------------------------------------------------- */
-- Convert gender to type enum
<% %w(male female).each do |gender| %>
UPDATE Artists SET Gender = '<%= gender.capitalize %>'
  WHERE Gender = LOWER('<%= gender %>');
<% end %>

<% %w(begindate enddate).each do |column| %>
-- Convert values 0 to NULL 
UPDATE Artists SET <%= column %> = NULL WHERE <%= column %> = 0;
<% end %>

<% %w(wiki_qid ulan).each do |column| %>
-- Convert empty values to NULL 
UPDATE Artists SET <%= column %> = NULL 
  WHERE <%= column %> = '';
<% end %>

ALTER TABLE Artists 
  ALTER COLUMN ULAN TYPE INTEGER USING ULAN::integer;

/* ----------------------------------------------------------------------------
  Data cleanup artworks
---------------------------------------------------------------------------- */
<% 
  %w(
    date
    dimensions
    dateacquired
    url
    thumbnailurl
    height_cm
    width_cm
  ).each do |column|
%>
-- Convert empty values to NULL 
UPDATE Artworks SET <%= column %> = NULL 
  WHERE <%= column %> = '';
<% end %>

<% %w(height_cm width_cm).each do |column| %>
-- Convert to numeric
ALTER TABLE Artworks
  ALTER COLUMN <%= column %> TYPE NUMERIC USING <%= column %>::numeric;
<% end %>

/* ----------------------------------------------------------------------------
  Normalize tables
---------------------------------------------------------------------------- */
<% tables.each do |name, table| %>
/* ----------------------------------------------------------------------------
  Create table <%= name %> and populate it 
  then delete the original column
---------------------------------------------------------------------------- */
CREATE TABLE <%= name %> (
  <%= name %>id INTEGER GENERATED ALWAYS AS IDENTITY,
  <%= name %> TEXT UNIQUE
);
INSERT INTO <%= name %> (<%= name %>) 
  SELECT DISTINCT <%= name %> FROM <%= table %>;
ALTER TABLE <%= table %> ADD COLUMN <%= name %>id INTEGER;
UPDATE <%= table %> x SET <%= name %>id = y.<%= name %>id
  FROM <%= name %> y where x.<%= name %> = y.<%= name %>;
ALTER TABLE <%= table %> DROP COLUMN <%= name %>;

<% end %>

<% enums.each do |name, table| %>
/* ----------------------------------------------------------------------------
  Create an ENUM type for <%= name %>
---------------------------------------------------------------------------- */
-- Create new type for <%= name %> and convert it
DO
$$
  BEGIN
    EXECUTE (
      SELECT format('CREATE TYPE <%= name.upcase %> AS ENUM (%s)',
        STRING_AGG(DISTINCT QUOTE_LITERAL(<%= name %>), ', '))
      FROM <%= table %>);
  END 
$$;
ALTER TABLE <%= table %>
  ALTER COLUMN <%= name %> 
  TYPE <%= name %> USING <%= name %>::<%= name %>;

<% end %>

/* ----------------------------------------------------------------------------
  Cleanup table after work is done
---------------------------------------------------------------------------- */
<% tables.to_h.flatten.uniq.each do |table| %>
VACUUM (ANALYZE, FULL) <%= table %>;
<% end %>
